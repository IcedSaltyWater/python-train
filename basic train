# days=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
# for i in enumerate(days):
#     print(i)
# food='roast'
# print(50*(food+'!'))
# ########################################################################
# class myClass():
#     def method1(self):
#         print("myClass method1")
#     def method2(self,someString):
#         print("myClass method2 "+someString)
#
# class anotherclass(myClass):
#     def method1(self):
#         myClass.method1(self)
#         print("anotherClass method1")
#     def method2(self, someString):
#         print("anotherClass method2 ")
# def main():
#     c = myClass()
#     c.method1()
#     c.method2("is another func")
#     c2=anotherclass()
#     c2.method1()
#
# main()
###########################################################################

# from datetime import date
# from datetime import time
# from datetime import datetime
# def main():
#     today=date.today()
#     print("Today's date is ", today)
#     print("Date components: ",today.day,today.month,today.year)
#     print("Today's weekday is: ", today.weekday())
#     days=["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
#     print("which is a:",days[today.weekday()])
#     print(datetime.now())
#     print(datetime.time(datetime.now()))
# main()
###########################################################################
# from datetime import datetime
# def main():
#     now = datetime.now()
#     print(now.strftime("%a, %d, %B, %y"))
#     # %y/%Y - Year, %a/%A - weekday, %b/%B - month, %d - day of month
#     print(now.strftime("Locale date and time: %c"))
#     print(now.strftime("Locale date: %x"))
#     print(now.strftime("Locale time: %X"))
#     # %c - locale's date and time, %x - locale's date, %X - locale's time
#     print(now.strftime("Current time: %I:%M:%S %p"))
#     print(now.strftime("24-hour time: %H:%M"))
#     # %I/%H - 12/24 Hour, %M - minute, %S - second, %p - locale's AM/PM
# main()
###############################################################################
# from datetime import timedelta
# from datetime import date
# from datetime import datetime
# from datetime import time
# print(timedelta(days=365,hours=9,minutes=2))
# now=datetime.now()
# print("today is: "+ str(now))
# print("one year from now it will be: "+ str(now+timedelta(days=365)))
# print("In 2 days and 3 weeks, it will be "+str(now+timedelta(days=2,weeks=3)))
#  # calculate the date one week ago, formatted as a string
# t=datetime.now()-timedelta(weeks=1)
# s=t.strftime("%A %B %d, %Y")
# print("One week ago it was: "+s)
# # How many days until April Fool's Day?
# today = date.today()
# afd = date(today.year, 4, 1)
# if afd < today:
#     print("April Fool's Day already went by %d days ago"% ((today-afd).days))
#     afd = afd.replace(year = today.year + 1)
# time_to_afd = afd-today
# print("It's just ", time_to_afd.days, "days until April Fool's Day")
###################################################################################
# import calendar
# #create a plain text calendar
# c= calendar.TextCalendar(calendar.MONDAY)
# st = c.formatmonth(2020,1,0,0)
# print(st)
#
# # create an HTML formatted calendar
# hc = calendar.HTMLCalendar(calendar.SUNDAY)
# st = hc.formatmonth(2020,1)
# print(st)
# # loop over the days of a month
# # zeroes mean that the day of the week is in an overlapping month
# for i in c.itermonthdays(2020,1):
#     print(i)
# # The Calendar module provides useful utilities for the given locale, such as the names of days and months in both full and abbreviated forms
# for name in calendar.month_name:
#     print(name)
# for day in calendar.day_name:
#     print(day)
#
# # Calculate days based on a rule: For example, consider a team meeting on the first Friday of every month.
# # To figure out what days that would be for each month, we can use this script:
# print("Team meetings will be on: ")
# for m in range(1,13):
#     cal = calendar.monthcalendar(2020,m)
#     weekone=cal[0]
#     weektwo=cal[1]
#     if weekone[calendar.FRIDAY]!=0:
#         meetday = weekone[calendar.FRIDAY]
#     else:
#         meetday = weektwo[calendar.FRIDAY]
#     print("%10s %2d"%(calendar.month_name[m],meetday))
#####################################################################################################
# def main():
#     # Open a file for writing and create it if it doesn't exist
#     f = open("textfile.txt", "w+") #"w": write the file. "+": create if doesn't exist.
#
#     #open the file for appending text to the end
#     f = open("textfile.txt","a") #"r": read data. "a": append data
#     # write some lines of data to the file
#     for i in range(10):
#         f.write("This is line "+ str(i)+"\r\n")
#     # close the file when done
#     f.close()
#     # Open the file back up and read the contents
#     if f.mode == 'r':
#         fl = f.readlines()
#         for x in fl:
#             print(x)
#         # contents=f.read()
#         # print(contents)
# if __name__=="__main__":
#     main()
# ##########################################################################################################
# import os
# from os import path
# import datetime
# from datetime import date,time, timedelta
# import time
# print(os.name)
# print("Item is a file: "+str(path.isfile("textfile.txt")))
# print("Item is a directory: "+str(path.isdir("textfile.txt")))
# # File path
# print("Item path: "+str(path.realpath("textfile.txt")))
# print("Item exists: " + str(path.exists("textfile.txt")))
# print("Item path and name: "+str(path.split(path.realpath("textfile.txt"))))
# # Get the modification time
# t = time.ctime(path.getmtime("textfile.txt"))
# print(t)
# print(datetime.datetime.fromtimestamp((path.getmtime("textfile.txt"))))
# # Calculate how long ago the item was modified
# td = datetime.datetime.now()-datetime.datetime.fromtimestamp(path.getmtime("textfile.txt"))
# print("It has been " + str(td) + "since the file was modified")
# print("Or, "+ str(td.total_seconds())+" seconds")
###############################################################################################################
# Example file for working with filesystem shell methods
import os
from os import path
import shutil
from shutil import make_archive
# make a duplicate of a existing file
if path.exists("textfile.txt"):
    # get the path to the file in the current directory
    src= path.realpath("textfile.txt")

    # let's make a backup copy by appending "bak" to the name
    dst = src + ".bak"

    # copy over the permission, modification times, and other info
    shutil.copy(src,dst)
    shutil.copystat(src,dst)

    # rename the original file
    os.rename("textfile.txt","newfile.txt")

    # now put things into a ZIP archive
    root_dir, tail = path.split(src)
    shutil.make_archive("archive","zip",root_dir)


